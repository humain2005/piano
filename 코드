// 입출력, 수학, 파일 등 필요한 표준 라이브러리 포함
#include <iostream>      // 콘솔 입출력 (std::cin, std::cout 등)
#include <fstream>       // 파일 입출력 (ofstream으로 WAV 저장)
#include <cmath>         // sin 함수 등 수학 함수 사용
#include <map>           // 키-값 쌍 저장 자료구조 (키보드 입력과 음 연결)
#include <string>        // 문자열 처리 (Note 이름 등)
#include <vector>        // 동적 배열 사용 (오디오 샘플 저장)
#include <memory>        // 스마트 포인터 사용 (shared_ptr 등)
#include <windows.h>     // Windows API 사용 (PlaySound 등)
#include <mmsystem.h>    // Windows 멀티미디어 시스템 사용 (WAV 재생 함수 포함)

// 라이브러리 연결 - mmsystem 관련 함수 사용을 위한 링크 설정
#pragma comment(lib, "winmm.lib")

// 오디오 설정 값 정의
const int SAMPLE_RATE = 44100;        // 초당 샘플 수 (CD 음질 수준)
const int BITS_PER_SAMPLE = 16;       // 한 샘플당 16비트 (2바이트)
const int CHANNELS = 1;               // 모노 채널 (1개 채널)
const int DEFAULT_DURATION = 300;     // 음 하나의 기본 재생 시간 (300ms = 0.3초)


//------------------------------------------------------------
// Note 클래스: 하나의 음의 이름과 주파수를 저장하는 클래스
//------------------------------------------------------------
class Note {
public:
    std::string name;      // 음의 이름 (예: "C", "A", "G", "C_high")
    double frequency;      // 주파수 값 (단위: Hz, 예: 440.0Hz)

    // 기본 생성자: 아무 값도 지정하지 않음
    Note() : name(""), frequency(0) {}

    // 매개변수 생성자: 이름과 주파수를 초기화
    Note(const std::string& n, double f) : name(n), frequency(f) {}

    // 동등 비교 연산자 오버로딩 (==) : Note 두 개를 비교할 수 있게 함
    bool operator==(const Note& other) const {
        return name == other.name && frequency == other.frequency;
    }

    // 출력 연산자 오버로딩: std::cout << Note 를 가능하게 함
    // 출력 예: C(261.63Hz)
    friend std::ostream& operator<<(std::ostream& os, const Note& n) {
        return os << n.name << "(" << n.frequency << "Hz)";
    }
};


//------------------------------------------------------------
// 추상 클래스 SoundElement: ToneNote와 RestNote의 부모 클래스
// => 다형성을 위해 사용됨
//------------------------------------------------------------
class SoundElement {
public:
    // 순수 가상 함수: 자식 클래스에서 반드시 구현해야 함
    // 오디오 샘플을 벡터에 추가하는 역할
    virtual void appendToBuffer(std::vector<short>& buffer) const = 0;

    // 가상 소멸자: 다형성 사용 시 메모리 해제를 올바르게 하기 위해 필요
    virtual ~SoundElement() = default;
};


//------------------------------------------------------------
// ToneNote 클래스: 실제로 소리가 나는 음표를 표현
//------------------------------------------------------------
class ToneNote : public SoundElement {
    Note note;     // 어떤 음인지 (이름, 주파수)
    int duration;  // 이 음의 길이 (밀리초 단위)
public:
    // 생성자: Note와 지속 시간을 받아 초기화
    ToneNote(const Note& n, int d = DEFAULT_DURATION) : note(n), duration(d) {}

    // 사운드 버퍼에 사인파 형태의 소리를 추가하는 함수
    void appendToBuffer(std::vector<short>& buffer) const override {
        // 몇 개의 샘플을 생성할지 계산
        int samples = SAMPLE_RATE * duration / 1000;

        // 샘플 수만큼 반복하면서 사인파 계산
        for (int i = 0; i < samples; ++i) {
            double t = static_cast<double>(i) / SAMPLE_RATE; // 현재 시간(초)
            // 사인파 계산: 32760은 음량(볼륨)을 최대값으로 설정
            short sample = static_cast<short>(32760 * sin(2 * 3.141592653589793 * note.frequency * t));
            buffer.push_back(sample); // 버퍼에 샘플 추가
        }
    }
};


//------------------------------------------------------------
// RestNote 클래스: 무음(쉼표) 구간을 표현
//------------------------------------------------------------
class RestNote : public SoundElement {
    int duration;  // 쉼표의 길이 (밀리초 단위)
public:
    // 생성자
    RestNote(int d = DEFAULT_DURATION) : duration(d) {}

    // 무음이므로 0값의 샘플을 넣어줌
    void appendToBuffer(std::vector<short>& buffer) const override {
        int samples = SAMPLE_RATE * duration / 1000;
        for (int i = 0; i < samples; ++i) {
            buffer.push_back(0); // 무음: 0 샘플
        }
    }
};


//------------------------------------------------------------
// WAV 파일 생성 함수
// 주어진 샘플 벡터를 실제 .wav 파일로 저장함
//------------------------------------------------------------
void writeWavFile(const std::string& filename, const std::vector<short>& samples) {
    std::ofstream file(filename, std::ios::binary); // 바이너리 모드로 파일 열기

    int dataSize = samples.size() * sizeof(short);  // 전체 샘플의 크기 계산
    int fileSize = 36 + dataSize;                   // WAV 파일의 전체 크기

    // WAV 파일의 헤더 작성 (RIFF 구조)
    file.write("RIFF", 4);                         // 리프 서명
    file.write(reinterpret_cast<const char*>(&fileSize), 4); // 전체 파일 크기
    file.write("WAVEfmt ", 8);                     // 포맷 서명

    // 포맷 서브청크 작성
    int fmtSize = 16;              // PCM 포맷일 경우 16
    short audioFormat = 1;         // PCM = 1
    short blockAlign = CHANNELS * BITS_PER_SAMPLE / 8;
    int byteRate = SAMPLE_RATE * blockAlign;

    file.write(reinterpret_cast<const char*>(&fmtSize), 4);
    file.write(reinterpret_cast<const char*>(&audioFormat), 2);
    file.write(reinterpret_cast<const char*>(&CHANNELS), 2);
    file.write(reinterpret_cast<const char*>(&SAMPLE_RATE), 4);
    file.write(reinterpret_cast<const char*>(&byteRate), 4);
    file.write(reinterpret_cast<const char*>(&blockAlign), 2);
    file.write(reinterpret_cast<const char*>(&BITS_PER_SAMPLE), 2);

    // data 서브청크 작성
    file.write("data", 4);                         // 데이터 서명
    file.write(reinterpret_cast<const char*>(&dataSize), 4); // 데이터 크기
    file.write(reinterpret_cast<const char*>(samples.data()), dataSize); // 실제 샘플
    file.close(); // 파일 닫기
}


//------------------------------------------------------------
// 템플릿 함수: 벡터 내용 출력용 (디버깅용 함수)
//------------------------------------------------------------
template<typename T>
void printVector(const std::vector<T>& v) {
    for (const auto& item : v) {
        std::cout << item << " ";
    }
    std::cout << "\n";
}


//------------------------------------------------------------
// 메인 함수: 프로그램의 진입점
// 사용자 입력을 받아 음표로 변환하고, 사운드를 재생함
//------------------------------------------------------------
int main() {
    // 문자 입력을 음표로 매핑 (각 키보드 키 → Note 객체)
    std::map<char, Note> notes = {
        {'a', {"C", 261.63}}, {'s', {"D", 293.66}}, {'d', {"E", 329.63}},
        {'f', {"F", 349.23}}, {'g', {"G", 392.00}}, {'h', {"A", 440.00}},
        {'j', {"B", 493.88}}, {'k', {"C_high", 523.25}}, {'l', {"D_high", 587.33}}
    };

    std::string line; // 사용자 입력 저장

    while (true) {
        std::cout << "\n입력: ";
        std::getline(std::cin, line); // 문자열 전체 입력 받음

        if (line == "exit") break; // exit 입력 시 종료

        // 음표와 쉼표를 저장할 컨테이너
        std::vector<std::shared_ptr<SoundElement>> song;

        // 입력 문자열을 한 글자씩 처리
        for (char key : line) {
            if (key == ' ') {
                // 공백이면 쉼표(RestNote) 추가
                song.push_back(std::make_shared<RestNote>());
            }
            else if (notes.count(key)) {
                // 해당 key에 대응되는 Note가 있으면 ToneNote로 추가
                song.push_back(std::make_shared<ToneNote>(notes[key]));
            }
            else {
                // 매핑되지 않은 키인 경우 오류 메시지 출력
                std::cout << "(error: " << key << ")\n";
            }
        }

        // 모든 음표/쉼표를 변환한 오디오 샘플 저장 벡터
        std::vector<short> samples;

        // 각각의 음 요소를 샘플로 변환해 buffer에 추가
        for (const auto& element : song) {
            element->appendToBuffer(samples);
        }

        // .wav 파일로 저장
        writeWavFile("output.wav", samples);

        // Windows API로 즉시 재생 (PlaySoundA 사용)
        PlaySoundA("output.wav", NULL, SND_FILENAME | SND_SYNC);
    }

    return 0; // 프로그램 종료
}
